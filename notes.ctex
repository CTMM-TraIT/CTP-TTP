
TraIT: Translational Research IT project

TTP: Trusted Third Party

CTP: Clinical Trial Processor

PIMS: Patient Identity Management System

MIRC: Medical Imaging Resource Center

The core idea is that patient data is ``//pseudonymized//'' (e.g. anonymized but
still distinguishable) by a third party: Custodix (though ``we'' e.g. Maastro
could (perhaps `must'?) perform pseudonymization as well: it seems (to me) that
this is even mandatory, as stated in the `vooronderzoek rapportage Mondriaan'
(see sheet pdf#11)

The system is build around two main components:

  -  CIAM (STS) is used for authentication and authorization,

  -  PIMS is the TTP system itself.




%\\ Apache CXF

Apache CXF is an open source ``services framework''; it allows us to construct
SOAP and REST interfaces. It is the recommended library by Custodix. It
implements the (Java-standardized) JAX-WS API, and it supports WS-Trust:

%|| cxf.apache.org/docs/ws-trust.html

JAX-WS specification:

%|| https://jcp.org/en/jsr/detail?id=224

JAX-RS is a similar specification, but meant for REST interfaces:

%|| https://jcp.org/en/jsr/detail?id=311



%\\\ Dealing with [[extension::jks]] files

When I requested access to the TTP, I got a [[extension::jks]] file which would
contain a private key and a certificate. JKS is the acronym for ``Java Key
Store''. The [[program::keytool]] program, which should be part of your Java
SDK installation, enables you to deal with such key stores:

%|| $ keytool -list
%|| keytool error: java.lang.Exception:
%||     Keystore file does not exist: C:\Users\raymond.dresens\.keystore

Note that the key store password is ``||changeit||'':

%|| $ keytool -list -keystore store.jks
%|| Enter keystore password: {{changeit}}
%||
%|| Keystore type: JKS
%|| Keystore provider: SUN
%|| 
%|| Your keystore contains 2 entries
%||
%|| trait test ca 2014, 22-jan-2014, trustedCertEntry,
%|| Certificate fingerprint (SHA1):
%||     80:2B:91:32:64:EB:99:32:89:04:FD:57:C5:CE:E8:49:2B:B5:39:0E
%|| submittingsite1service, 22-jan-2014, PrivateKeyEntry,
%|| Certificate fingerprint (SHA1):
%||     8F:DA:9E:6B:78:96:BB:F8:EB:07:6D:6F:33:88:51:84:13:3A:9C:E3

Extracting the private key from the [[extension::jks]] file can be done like
this:

%|| keytool -importkeystore \
%||      -srckeystore store.jks \
%||      -srcalias submittingsite1service \
%||     -destkeystore private-key.pfx -deststoretype PKCS12

The following interaction is expected:

%|| Enter destination keystore password:  {{changeit}}
%|| Re-enter new password: {{changeit}}
%|| Enter source keystore password:  {{changeit}}

converting e.g. exporting the private key from [[file::private-key.pfx]] can be
done like this:

%|| openssl pkcs12 -in private-key.pfx -nocerts -nodes -out private-key.pem

The [[option::openssl,-nodes]] option is the ``no DES'' option; it prevents
[[program::openssl]] to encrypt the key to the output.

There's a certificate to extract as well:

%|| openssl pkcs12 -in private-key.pfx -nokeys -out certificate.pem



%\\\ Using the certificate and private key

A ``plain'' [[program::curl]] invocation won't do:

%|| curl https://ciam-dev-trait.custodix.com/sts/services/X509STS
%|| ... <faultstring>No certificate indentifier found</faultstring> ...

The question is: can we make it work with the private key and the certificates
that we exported earlier?

%|| curl -v -k https://ciam-dev-trait.custodix.com/sts/services/X509STS \
        --cert certificate.pem --key private-key.pem

I wish! I get the same error, and I don't really understand why\ldots{}



%\\\ Interesting resources

  -  [[url::http://www.jroller.com/gmazza/entry/web_service_tutorial]]




%\\ SAML: Security Assertion Markup Language

SAML is a ``//framework//'' for performing authentication (and related things
like permissions and information about a user). The current version of the
specification is 2.0; it is produced by the OASIS commitee.

Some ``place to be'' resource are\ldots{}

  -  [[url::http://saml.xml.org/wiki/saml-introduction]] contains official documentation.

  -  [[url::http://saml.xml.org/wiki/saml-open-source-implementations]] contains a list of projects that implement SAML.

  -  [[url::http://saml.xml.org/]]




%\\ Custodix STS web service

%\\\ Using the example code

%|| ./PseudonymizationClient \
%||     123212321 \
%||     targetCollection1 \
%||     src/main/resources/resources/clientKeystore.properties \
%||     submittingsite1service

You should get pseudonyms like ``||6310daba-7f95-45cd-85cf-dc557178edc8||''.

The [[file::clientKeystore.properties]] file, which is part of the resources
directory, contains an actual reference to the key store file
([[file::store.jks]]) but relative to the root of the classpath (as if it is
loaded as a resource file).

The [[file::stsKeystore.properties]] file is used to reference to the
key store file ([[file::idp.jks]]) - this key store is (likely) neccesary for
authentication (or the verification?) of the STS.

The Custodix STS is compliant with the WS-Trust v1.4 specification.

%|| https://ciam-dev-trait.custodix.com/sts/

Actual SOAP/XML services:

%|| https://ciam-dev-trait.custodix.com/sts/services/STS

%|| https://ciam-dev-trait.custodix.com/sts/services/X509STS



%\\\ Issues

%\\\\ Non-unique body parts (//solved//)

Three [[extension::wsdl]] files are downloaded and stored in my private
[[project::TTPtools]] project. I attempted to convert then to java code (with
the ``||cxf-codegen-plugin||'' plugin but that yields an error (when I tried
to convert the ``STS'' WSDL):

%|| (generate-sources) on project TTPtools: Non unique body parts!
%||
%|| In a port, operations must have unique operation signaure on the wire for
%|| successful dispatch.
%||
%|| In port {http://docs.oasis-open.org/ws-sx/ws-trust/200512/}CustodixSTS,
%|| Operations "{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}Renew" and
%||            "{http://docs.oasis-open.org/ws-sx/ws-trust/200512/}Issue" have
%|| the same request body block
%|| {http://docs.oasis-open.org/ws-sx/ws-trust/200512}RequestSecurityToken

I found the following message in the ``cxf-users'' mailing list:

  -  [[url::http://mail-archives.apache.org/mod_mbox/cxf-users/201301.mbox/%3C50E7031B.2000301@fernausoft.de%3E]]

  -  [[url::http://mail-archives.apache.org/mod_mbox/cxf-users/201301.mbox/%3C3DA1F4E8-41AB-4EED-BE04-AE9F03FDC9F3@apache.org%3E]]

  -  [[url::http://mail-archives.apache.org/mod_mbox/cxf-users/201301.mbox/%3C50E70E9F.5030909@fernausoft.de%3E]]

The solution: I depended on CXF 2.2.3; I tried 2.7.8 and it worked: oops.




%\\ Custodix PIMS web service

WSDL ``index'' (publicly available):

%|| https://pims-dev-trait.custodix.com/pims/services/

For us relevant services:

  -  **PseudonymizationService**

     https://pims-dev-trait.custodix.com/pims/services/PseudonymizationService

     Allows issuing pseudonymization and reidentification requests.

  -  **RegistrationService**

     https://pims-dev-trait.custodix.com/pims/services/RegistrationService

     Allows registration of users, submitting sites and projects.

(Human web) interface:

%|| https://pims-dev-trait.custodix.com/pims/home.xhtml

Actual SOAP/XML service:

%|| https://pims-dev-trait.custodix.com/pims/services/AuditService

Profile / account management (for ``you personally''):

%|| https://ciam-dev-trait.custodix.com/idm




%\\ Groovy integration

Groovy is mentioned in the Custodix documentation. If it is really neccesary
to use it (though it may be really helpful) is currently unknown.

  -  [[utl::http://groovy.github.io/gmaven/]]

  -  [[url::http://docs.codehaus.org/display/GROOVY/Groovy-Eclipse+compiler+plugin+for+Maven]]




%\\ The Clinical Trial Processor (CTP)

http://mircwiki.rsna.org/index.php?title=CTP-The_RSNA_Clinical_Trial_Processor

http://mircwiki.rsna.org/index.php?title=CTP_Articles

The CTP can be compiled with the [[program::ant]] program. Compiling it yields
an installation file ([[program::CTP-installer.jar]] in the [[dir::products/]]
directory). Installing it yields a program ([[program::Runner.jar]]) that can
be started like this:

%|| java -jar Launcher.jar

The resulting GUI allows you to start and stop de daemon that implements the
web interface. The default web user interface credentials are: ``||admin||''
for user name, ``||password||'' for password.

[[file::ctpConfig/sedi_anonymizer/maastro/lookup.properties]] should contain
the following entry:

%|| ptid/SEDI_ANON.002=2222

Such an entry is currently responsible for `anonymization'.

Running a ``batch'': copy ``||SEDI_ANON.002||'' into the [[dir::import]]
folder of the [[dir::CTP]] installation directory (which will exist after
you run it for the first time - because the configuration will result in its
creation).



%\\\ CTP development notes

The following command sequence is used for building and deploying:

%|| ant
%|| cd products; java -jar CTP-installer.jar

I always installed it in the same directory (like [[path::C:\Java]]; the
installer will create a [[dir::CTP]] directory for you)


%\\\\ 

The lookup table editor (which seems to be a frontend for a Java
[[extension::properties]] file editor) allows you to perform
``lookup substitutions''; during development, it contained an entry that
replaced ``||ptid/SEDI_ANON.002||'' to ``||2222||''.

The ``||lookup